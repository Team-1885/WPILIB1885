package frc.robot.subsystems;

import java.util.Map;
import java.util.stream.Stream;
import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;
import edu.wpi.first.networktables.GenericEntry;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.ADAM;
import frc.robot.hardware.vendors.thirdparties.revlib.REVLibCAN;
import lombok.Getter;

/**
 * WestCoastDrive Subsystem.
 */
@SuppressWarnings("PMD.CommentSize")

public class WestCoastDrive extends SubsystemBase {

    private @Getter final ADAM adam = new ADAM(throwable: null);

    private static CANSparkMax motorL = new CANSparkMax(REVLibCAN.R_MASTER_ID, REVLibCAN.MOTOR_TYPE);
    private static CANSparkMax followerL = new CANSparkMax(REVLibCAN.R_FOLLOWER_ID, REVLibCAN.MOTOR_TYPE);

    private static CANSparkMax motorR = new CANSparkMax(REVLibCAN.L_FOLLOWER_ID, REVLibCAN.MOTOR_TYPE);
    private static CANSparkMax followerR = new CANSparkMax(REVLibCAN.L_FOLLOWER_ID, REVLibCAN.MOTOR_TYPE);

    private @Getter relEncoder encoderL, encoderR;

    public KMotorSpin() {
        super();
        motorR.restoreFactoryDefaults;
        motorL.restoreFactoryDefaults;
        followerR.restoreFactoryDefaults;
        followerL.restoreFactoryDefaults;

        motorL.setInverted(false);
        followerL.setInverted(false);

        motorR.setInverted(true);
        followerR.setInverted(true);

        encoderL = motorL.getEncoder();
        encoderR = motorR.getEncoder();

    }

    @Override
    public void periodic() {


    }

    public void reset() {

        encoderL.setPosition(0);
        encoderR.setPosition(0);

        motorL.stopMotor();
        motorR.stopMotor();

    }

    public void setMotorSpeed(final double speedL, final double speedR) {

        motorL.set(leftSpeed * 0.5);
        motorR.set(rightSpeed * 0.5);

    }

    public double getMotorSpeed() {
        
        return motorL.get();

    }

}